// Importation des classes n√©cessaires pour g√©rer la connexion √† la base de donn√©es
import java.sql.Connection;     // Classe qui repr√©sente une connexion √† la base de donn√©es
import java.sql.SQLException;   // Classe qui g√®re les erreurs li√©es √† SQL (ex : mauvaise requ√™te, probl√®me de connexion)

// D√©claration de la classe principale qui va tester le pool de connexions
public class PoolDemo {

    // M√©thode principale : c'est le point d'entr√©e de l'application Java
    public static void main(String[] args) {

        // Bloc try-catch : permet de g√©rer les erreurs qui peuvent survenir pendant l'ex√©cution
        try {
            // üîÑ R√©cup√©ration d'une connexion depuis le pool HikariCP
            // AppDataSource.getDataSource() : m√©thode statique qui retourne le pool de connexions
            // .getConnection() : demande une connexion disponible dans le pool
            Connection conn = AppDataSource.getDataSource().getConnection();

            // ‚úÖ Si la connexion est r√©ussie, on affiche un message dans la console
            System.out.println("Connexion r√©ussie via le pool HikariCP !");

            // üîí Fermeture de la connexion
            // ATTENTION : ici, on ne d√©truit pas la connexion, on la rend au pool pour qu'elle soit r√©utilis√©e
            conn.close();

        } catch (SQLException e) {
            // ‚ùå Si une erreur survient (ex : base inaccessible, mauvais mot de passe...), elle est captur√©e ici
            // e.getMessage() : retourne le message d'erreur d√©taill√©
            System.out.println("Erreur : " + e.getMessage());
        }
    }
}

//‚úÖ R√©sum√© p√©dagogique
//        √âl√©ment	R√¥le
//        Connection	Objet qui permet d‚Äôenvoyer des requ√™tes SQL √† la base
//AppDataSource.getDataSource()	M√©thode qui retourne le pool HikariCP
//        getConnection()	Demande une connexion disponible dans le pool
//conn.close()	Rend la connexion au pool (elle n‚Äôest pas d√©truite)
//        try-catch	Permet de g√©rer les erreurs sans faire planter le programme

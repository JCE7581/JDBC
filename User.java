// D√©claration de la classe User
// Cette classe repr√©sente un "utilisateur" dans ton application Java
// Elle correspond directement √† la table "users" dans ta base de donn√©es MySQL
public class User {

    // üî∏ D√©claration des variables (appel√©es "champs" ou "attributs") de la classe

    // Identifiant unique de l'utilisateur
    // Il correspond √† la colonne "id" dans la table MySQL
    // Il est auto-incr√©ment√© par MySQL, donc on ne le fournit pas lors de l'insertion
    private int id;

    // Nom de l'utilisateur
    // Correspond √† la colonne "name" dans la table MySQL
    private String name;

    // Adresse email de l'utilisateur
    // Correspond √† la colonne "email" dans la table MySQL
    private String email;

    // üî∏ Constructeur #1 : utilis√© pour cr√©er un nouvel utilisateur AVANT qu'il soit ins√©r√© dans la base
    // On ne conna√Æt pas encore l'ID (car il sera g√©n√©r√© automatiquement par MySQL)
    public User(String name, String email) {
        this.name = name;     // On initialise le champ "name" avec la valeur pass√©e en param√®tre
        this.email = email;   // On initialise le champ "email" avec la valeur pass√©e en param√®tre
    }

    // üî∏ Constructeur #2 : utilis√© quand on lit un utilisateur DEPUIS la base de donn√©es
    // Dans ce cas, on conna√Æt d√©j√† l'ID, le nom et l'email
    public User(int id, String name, String email) {
        this.id = id;         // On initialise le champ "id"
        this.name = name;     // On initialise le champ "name"
        this.email = email;   // On initialise le champ "email"
    }

    // üî∏ Getters : m√©thodes qui permettent de LIRE les valeurs des champs
    // On les utilise pour acc√©der aux donn√©es de l'objet depuis l'ext√©rieur

    public int getId() {
        return id;            // Retourne la valeur du champ "id"
    }

    public String getName() {
        return name;          // Retourne la valeur du champ "name"
    }

    public String getEmail() {
        return email;         // Retourne la valeur du champ "email"
    }

    // üî∏ Setters : m√©thodes qui permettent de MODIFIER les valeurs des champs
    // On les utilise pour mettre √† jour les donn√©es de l'objet

    public void setId(int id) {
        this.id = id;         // Met √† jour la valeur du champ "id"
    }

    public void setName(String name) {
        this.name = name;     // Met √† jour la valeur du champ "name"
    }

    public void setEmail(String email) {
        this.email = email;   // Met √† jour la valeur du champ "email"
    }
}

//‚úÖ R√©sum√© p√©dagogique
//√âl√©ment	R√¥le
//private	Rend les champs inaccessibles directement depuis l‚Äôext√©rieur (s√©curit√©)
//this.nomChamp	Fait r√©f√©rence au champ de la classe (utile quand le nom du param√®tre est identique)
//getX()	Permet de lire la valeur d‚Äôun champ
//setX()	Permet de modifier la valeur d‚Äôun champ
//Constructeurs	Permettent de cr√©er un objet avec des valeurs initiales
